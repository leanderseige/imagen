[{"/var/imagen/2020/imagenviewer/src/index.js":"1","/var/imagen/2020/imagenviewer/src/App.js":"2","/var/imagen/2020/imagenviewer/src/reportWebVitals.js":"3","/var/imagen/2020/imagenviewer/src/components/Viewer.js":"4","/var/imagen/2020/imagenviewer/src/components/DisplayCanvas.js":"5"},{"size":500,"mtime":1607461344762,"results":"6","hashOfConfig":"7"},{"size":1303,"mtime":1607462121179,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1607461344762,"results":"9","hashOfConfig":"7"},{"size":2025,"mtime":1607461344762,"results":"10","hashOfConfig":"7"},{"size":1064,"mtime":1607461344762,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"h1m3xc",{"filePath":"15","messages":"16","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"/var/imagen/2020/imagenviewer/src/index.js",[],["25","26"],"/var/imagen/2020/imagenviewer/src/App.js",["27"],"import logo from './imagen.png';\nimport './App.css';\nimport Viewer from './components/Viewer.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <img src={logo} alt=\"logo\" />\n      <p>ImageN is an image generator that uses a single integer with an accuracy of 65535 bits to generate every possible image. The generator initialized the integer with the value 0 and now constantly adds the value 1 in order to generate every possible pattern and thus every possible image.</p>\n      <p>ImageN is an art project that works with the contrast of computability and complexity.</p>\n      <Viewer />\n      <p>The generator is a tiny C programm calculating millions of patterns per second. The original interface was a Java applet with many options to turn the pattern into images. Currently I can only provide a simple Javascript replacement. I hope to improve it in the future. The raw data can be accessed at <a href=\"http://imagen.manducus.net/seed\">http://imagen.manducus.net/seed</a>.</p>\n      <p>contemporary and historic source codes can be found on <a href=\"https://github.com/leanderseige/imagen\" target=\"_blank\">https://github.com/leanderseige/imagen</a></p>\n      <p>The generator started in the year 2000 but was offline from 2004 to 2020.</p>\n    </div>\n  );\n}\n\nexport default App;\n","/var/imagen/2020/imagenviewer/src/reportWebVitals.js",[],"/var/imagen/2020/imagenviewer/src/components/Viewer.js",[],"/var/imagen/2020/imagenviewer/src/components/DisplayCanvas.js",["28"],"import React from 'react';\n\nclass DisplayCanvas extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n\n  render() {\n    let pixels = []\n    let numberindex = 0\n    let cindex={\n      1: [\"#000\",\"#fff\"],\n      2: [\"#000\",\"#555\",\"#aaa\",\"#fff\"],\n      4: [\"#000\",\"#008\",\"#00f\",\"#088\",\"#0ff\",\"#080\",\"#0f0\",\"#800\",\"#880\",\"#808\",\"#f00\",\"#f0f\",\"#ff0\",\"#888\",\"#ccc\",\"#fff\"]\n    }\n    let depth=this.props.colormode\n\n    for(let y=0; y<16; y++) {\n      for(let x=0; x<16; x++) {\n        numberindex=Math.floor((x+y*16)/16)\n        if(numberindex<=this.props.numbers.length) {\n          let mask = 0xffff & ((2**depth)-1)\n          pixels.push(\n            <rect x={x*20*depth} y={y*20*depth} width={20*depth} height={20*depth} style={{fill:cindex[depth][(this.props.numbers[numberindex]>>(x*depth))&mask]}} />\n          )\n        }\n      }\n    }\n    return(\n      <svg viewBox={\"0 0 320 320\"} width=\"320px\" height=\"320px\" style={{backgroundColor:\"black\",marginRight:\"16px\"}}>\n        {pixels}\n      </svg>\n    )\n  }\n}\n\nexport default DisplayCanvas\n",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":14,"column":114,"nodeType":"35","endLine":14,"endColumn":129},{"ruleId":"36","severity":1,"message":"37","line":4,"column":5,"nodeType":"38","messageId":"39","endLine":6,"endColumn":6},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]